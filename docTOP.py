 #  documentation.cpp
 # DESCRIPTION:TRIVENI-OpenFOAMv2.0 Documentataion generator in Doxygen
 # REQUIREMENTS:
 # BUGS:
 # AUTHOR: Alok_Jha
 # E-mail: jhaalok1984_at_gmail.com
 # ORGANIZATION:NPCIL
 # VERSION:
 # REVISION:
 # CREATED:Tuesday, 27 November 2018.
##
PROJECT_NAME        ="TRIVENI-OpenFOAMv2.0"
IMAGE_PATH          ="/home/user01/TRIVENI-OpenFOAM"
EXAMPLE_PATH        ="/home/user01/TRIVENI-OpenFOAM"
HTML_COLORSTYLE_HUE =1

## @mainpage TRIVENI-OpenFOAMv2.0
##Welcome to TRIVENI-OpenFOAMv2.0 Documentation utility. This software is for solving
##coupled Thermal-hydraulic and neutron kinetics equation
##with temperature feedback in cross section library generation.
##  @section intro_sec Introduction
## TRIVENI is a 3-D finite difference neutron diffusion equation solver.
## OpenFOAM is a CFD tool written in C++ language, which can be used for
## solving very many types of computaional fluid dynamics problems.
##  @section requirement_sec System Requirements
## * Linux-kernel-4.19 or higher.
## * OpenFOAM-4.0 or higher.
## * 4GB RAM or higher (If <a href= "https://www.paraview.org/">Paraivew</a> or
## <a href= "https://visit.llnl.gov/">VisIt </a> is to be used for post-processing).
##  @section install_sec Installation
## The DVD accompanying this documentation is a self executable package. Simply insert it
## the DVD player of your computer and you are good to go.
## @author
## Alok Jha (alokjha@npcil.co.in) \n
## Reactor Physics Section \n
## Tarapur Atomic Power Station - 3&4 \n 
## 02525-283879 \n
## @copyright This software product is licensed under MIT permissive license.
## @date 27-Nov-2018
## \class TRIVENI
## TRIVENI is 3-D finite difference neutron diffusion equation solver written in
## FORTRAN programming language.
## It has been developed for Reactor Physics
## Computer Code Development For Neutronic Design Fuel-Management, Reactor Operation
## and Safety Analysis of Indian PHWRs. It is used for core follow-up of Indian PHWRs.
## It has been developed by Theoretical Physics Division of Bhabha Atomic Research Centre,
## India.To carry out the fuel management tasks of the reactors
## under operation a computer code package was developed in the
## sixties. It was based on DUMLAC code for lattice parameter
## calculations and TRIVENI/DIMENTRI codes for core and fuel
## management calculations. This code system was considered
## inadequate for design of second series of 235 MWe PHWRs and
## larger reactors of 500 MWe. Hence, a broad based reactor
## physics research and development programme was undertaken
## to develop new code packages and their validation. These
## codes have already been used for commissioning problems of
## 235 MWe PHWRs, design problems of 500 MWe units and day to
## day fuel management of operating units.
## The starting point in any reactor physics calculation
## is a well proven multigroup cross-section library. We have
## made use of 69-group WIMS cross-aection set derived from UK
## Nuclear Data Library. In this cross-section set, there are
## 14 fast groups, 13 resonance groups and 42 thermal groups.
## There are tables for few resonance materials such as U235 ,
## U-233,Pu-239 which give resonance cross sections as a function
## of effective potential cross-aection and temperatures.
## Temperature dependent thermal scattering matrices for a
## variety of scattering laws are included in the library for
## the principal moderators which include hydrogen, deuterium,
## graphite, beryllium and oxygen. The resonances at 0.29 ev
## for Pu-239 and at 1.06 ev for Pu-240 are treated by fine
## energy-group structure in these energy ranges.
## Originally only infinite dilution cross-sections
## were available in the library obtained from U.K. for Th-233
## and U . The resonance cross-sections for these elements
## were generated by usng a simplified procedure of integrating
## the slowing down equation by multigroup technique. The fine
## group cross-sections were prepared using the basic data from
## ENDF/B-IV
## \par Lattice Physics
## Three computer codes MURLI, CLIMAX and CLUB have been
## developed for lattice calculations. Both these codes are
## multigroup transport theory codes. CLIMAX code treat^s the
## cluster by ring homogenization procedure. CLUB code
## considers the cluster geometry explicitly. Both these
## lattice codes have been extensively validated through the
## analysis of Canadian experimental data for different sized
## clusters and with different coolants. The computed eigen-
## values and the reaction rates agree well with the corres-
## ponding measured values. Analysis of the available burnup
## measurements in NPD reactor also yielded good results. The
## calculated void coefficient for RAPS by both the codes is
## very close to the Canadian results. Thus the codes can be
## used for the routine design problems in PHWRs.
## The computer code CLUB has further been improved
## to generate hyperfine pin power distribution as a function
## of burnup. The fuel rod can now be subdivided in a number
## of annular regions and burnup equations can separately be
## solved for each annular region. Thorium-chain has also
## been included for biirnup. Apart from burnup equations in
## fuel, the code has been modified to treat burnable poison
## in moderator. Calculations of kinetics parameters like
## effective delayed neutron fraction \f$\beta_{eff}\f$ and  life time l
## can now be handled by the code CLUB.
## It is proposed to use 37 rod clustersin 500 MKe
## PHWRs. For this type of cluster, very little experimental
## results are available in the open literature. Therefore,
## it would be useful to perform some additional lattice
## experiments with 37-rod fuel cluster in order to gain
## more confidence. There is also a paucity of experimental
## burnup data in the literature about the isotopic composition of irradiated fuel bundles. It is, therefore, necessary 
## to experimentally determine the number densities of various
## heavy nuclides in a fuel bundle as a function of irradiation.
## This data can then be used to check the various lattice
## codes at high burnups.
## \par CORE SIMULATION STUDIES
## The core simulations are done in two group diffusion
## theory.
## These require :
## -# Homogenised normal fuel lattice parameters in two
## energy groups from transport theory lattice codes,
## -# Simulating the effects of reactivity devices
## -# Core calculational models.
##
## The first of these requirements is met by the muitigroup
## lattice transport theory codes CLUB or CLIMAX explained
## earlier.
## PHWRs contain reactivity devices (RDS) like control adjusters
## and zone control light water compartments as well as shut
## down devices. They enter in a perpendicular direction
## compared to fuel channels. Simulation of these devices thus
## becomes complicated. This is implemented in two possible
## models based on
## -# Supercell methods, and
## -# Direct (non-supercell) methods
##
## The final stage of core calculation is hence linked with the
## choice of the reactivity device modelling.
## \par Supercell Methods
##
## A 3D parallel piped containing part of the fuel
## channel and the reactivity device surrounded by the moderator
## form the supercell. The dimensions of such a supercell
## should essentially be derived from the assumption that the
## fluxes recover on the opposite edge of the supercell - or
## a zero net current boundary condition is possible on the
## sides of the super cell. In the models described here a
## supercell of one pitch length along the x - axis, half a
## bundle length along the axial z - axis (both nearly 25 cm)
## and half a pitch along the direction of insertion of RD is
## considered. Due to strong heterogeneities of the fuel and
## the RDs one should either employ a direct 3D transport
## theory model or arrive at effective boundary conditions on
## the fuel and RD surfaces and employ diffusion theory
## approach. Both these models have been developed in
## addition to employing Monte Carlo scheme for validation
## purposes.
##
## For further study the reader is suggested to go through
## -# In-core fuel management benchmarks for PHWRs (IAEA-TECDOC-887)
## -# Reactor Physics Computer Code Development For Neutronic Design.
##    Fuel-Management, Reactor Operation and Safety Analysis of PHWRs(B. P. Rastogi,Theoretical Physics Division, BARC,1989)
## -# WIMS-D Library Update (INTERNATIONAL ATOMIC ENERGY AGENCY VIENNA, 2007)
##
## \class OpenFOAM
## OpenFOAM is free, open source software for CFD from the OpenFOAM Foundation.
## \par OpenFOAM and The OpenFOAM Foundation
##  * OpenFOAM is the leading free, open source software for computational fluid dynamics (CFD)
##  * The OpenFOAM Foundation is the independent distributor of OpenFOAM
##  * OpenFOAM is available for Linux , macOS and Windows 10
##  * OpenFOAM is developed by contributors, primarily from CFD Direct
##  * OpenFOAM is funded by those who benefit from it
##  * The OpenFOAM Foundation represents the interests of OpenFOAM users
##  * The user is recommended to go to the <a href="https://openfoam.org">OpenFOAM</a> website for further information.
## \class SALOME
## SALOME - The Open Source Integration Platform for Numerical Simulation
## \par What is SALOME
## SALOME is an open-source software that provides a generic Pre- and
## Post-Processing platform for numerical simulation. It is based on an open and
## flexible architecture made of reusable components.
## SALOME is a cross-platform solution. It is distributed under the terms of the
## GNU LGPL license. You can download both the source code and the executables from
## this site.
## \par How can SALOME be used?
## SALOME can be used as a standalone application for generation of the CAD model,
## its preparation for the numerical calculations and post-processing of the
## calculation results.
## SALOME can also be used as a platform for integration of the external
## third-party numerical codes to produce a new application for the full life-cycle
## management of CAD models.
## \par SALOME core features
## Supports interoperability between CAD modeling and computation software (CAD-CAE link).
## Facilitates integration of new components into heterogeneous systems for the
## numerical computation.
## Sets priority to the multi-physics coupling between computation softwares.
## Provides generic, user-friendly and efficient, user interface, which helps to
## reduce the costs and delays of carrying out the studies.
## Reduces training time to the specific time for learning the software solution
## based on this platform.
## Provides access to all functionalities via the integrated Python console.
## \par What can you do with SALOME?
## * Create, modify, import and export (IGES, STEP, BREP, ...), repair and clean CAD models.
## * Generate mesh for CAD models; edit meshes; check mesh quality; import and
## export mesh data (MED, UNV, DAT, STL, ...).
## * Handle physical properties and quantities attached to geometrical items.
## * Perform computation using one or more external solvers (coupling).
## * Display computation results (scalar, vectorial data).
## * Manage studies (create, save, reload, ...).
## * The user is recommended to go to the <a href= "https://www.salome-platform.org/">SALOME</a> website for further information.
## \class VisIt
## VisIt is a distributed, parallel, visualization tool for visualizing data
## \par VisIt Getting Started Manual
## VisIt is a distributed, parallel, visualization tool for visualizing data defined on two- and
## three-dimensional structured and unstructured meshes. VisIt’s distributed architecture
## allows it to leverage both the compute power of a large parallel computer and the graphics
## acceleration hardware of a local workstation. Another benefit of the distributed
## architecture is that VisIt can visualize the data where it is generated, eliminating the need
## to move the data. VisIt can be controlled by a Graphical User Interface (GUI) or through
## the Python scripting language.
## This document introduces you to the VisIt GUI. You will be given a brief overview on how
## VisIt works and then be shown how to start VisIt and use the various controls in the VisIt
## Main and popup windows.
## \par  Understanding How VisIt Works
## The basic paradigm used by VisIt to visualize data is to create one or more plots in a
## visualization window, also known as a vis window. Examples of plots include Mesh plots,
## Contour plots and Pseudocolor plots. Plots take as input one or more variables. VisIt
## supports both scalar and vector variables. It is possible to modify the variables by applying
## one or more operators to the variables before passing them to a plot. Examples of
## operators include arithmetic operations or taking slices through the mesh. It is also
## possible to restrict the visualization of the data to subsets of the mesh.
## VisIt supports up to 16 visualization windows. Each vis window is independent of the
## other vis windows. VisIt uses an active window concept; all changes made in the VisIt
## Main window or one of its popup windows apply to the currently active window.
## VisIt reads its data and performs most of its processing in compute engine processes. A
## compute engine is launched on each machine where data to be visualized is located. The
## Host profiles window is used to specify properties about the compute engines for different
## machines, such as the number of processors to use when running the engine. The status of
## a compute engine is displayed in the Compute engines window. It is also possible to
## interrupt the current operation on the Compute engines window.
## \class Gnuplot
## Gnuplot is a plotting utility with tons of customization.
## \par Your copy of gnuplot documentation
## First of all, gnuplot documentation should have been included in your local gnuplot installation.
## * gnuplot.pdf — full User Manual
## * faq.pdf — Frequently Asked Questions
## * gnuplot.gih — on almost all platforms: this is the file from which the help ## commands get their help
## * gnuplot.inf and gnupmdrv.inf on IBM OS/2 and eComStation
## * gnuplot.hlp on MS Windows
## * Official gnuplot online documentation
## * The user is recommended to go to the <a href= "http://www.gnuplot.info/">Gnuplot</a> website for further information.
## \class ParaView
## ParaView is an open-source visualization application.
## \par ParaView
## ParaView is an open-source, multi-platform data analysis and visualization
## application. ParaView users can quickly build visualizations to analyze their
## data using qualitative and quantitative techniques. The data exploration can
## be done interactively in 3D or programmatically using ParaView’s batch
## processing capabilities.
## ParaView was developed to analyze extremely large datasets using distributed
## memory computing resources. It can be run on supercomputers to analyze
## datasets of petascale size as well as on laptops for smaller data, has become
## an integral tool in many national laboratories, universities and industry,
## and has won several awards related to high performance computation.
##
## The user is recommended to go to the <a href= "https://www.paraview.org/">Paraview</a> website for further information.
## \class Python
## Python is a programming language that lets you work quickly
## and integrate systems more effectively.
## \par Getting Started
## Python can be easy to pick up whether you're a first time programmer or you're experienced with other languages.
## The following pages are a useful first step to get on your way writing programs with Python!
##
## * Beginner's Guide, Programmers
## * Beginner's Guide, Non-Programmers
## * Beginner's Guide, Download & Installation
## * Code sample and snippets for Beginners
## 
## \par Open-source
## Python is developed under an OSI-approved open source license, making it freely usable and distributable, even for commercial use. Python's license is administered by the Python Software Foundation.
## 
## * Learn more about the license
## * Python license on OSI
## * Learn more about the Foundation
## * The user is recommended to go to the <a href= "https://www.python.org/">Python</a> website for further information.
## \class Fortran
## Fortran formerly FORTRAN is a word  derived from Formula Translation
## \par Fortran
## Fortran formerly FORTRAN, derived from Formula Translation is a general-purpose,
## compiled imperative programming language that is especially suited to numeric computation and scientific computing.
## Originally developed by IBM in the 1950s for scientific and engineering applications
## FORTRAN came to dominate this area of programming early on and has been in continuous
## use for over half a century in computationally intensive areas such as numerical
## weather prediction, finite element analysis, computational fluid dynamics, computational
## physics, crystallography and computational chemistry. It is a popular language for
## high-performance computing and is used for programs that benchmark and rank the
## world's fastest supercomputers.
## The user is recommended to read the wikipedia pages on <a href= "https://en.wikipedia.org/wiki/Fortran">Fortran</a> website for further information.
## @example Fuel
## @image html fuel.jpg
## @example Mesh_Sample_2
## @image html meshblack.png
## @image html meshred.png
## @example CTM_Instrumented
## @image html rpds.jpeg
## @example Temperature_Profile_at_Times
## @image html t0s.png
## @image html t1s.png
## @image html t3s.png
## @image html t5s.png
## @image html t20ms.png
## @image html t4s.png
## @image html t7s.png
## @image html t10s.png
## @example Mesh_Sample_1
## @image html endface.png
## @image html sidemesh.png
## @example Simulation_Example_Video
## <a href="file:///home/user01/TRIVENI-OpenFOAM/Images/OpenFOAM1.ogv">Simulation_Video1</a>\n
## <a href="file:///home/user01/TRIVENI-OpenFOAM/Images/OpenFOAM2.ogv">Simulation_Video2</a>
